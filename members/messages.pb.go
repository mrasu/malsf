// Code generated by protoc-gen-go.
// source: messages.proto
// DO NOT EDIT!

/*
Package members is a generated protocol buffer package.

It is generated from these files:
	messages.proto

It has these top-level messages:
	NodeInfo
	AllNodeInfo
	AckPing
	Result
	Empty
*/
package members

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NodeInfo struct {
	Address           string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	IncarnationNumber int32  `protobuf:"varint,2,opt,name=incarnationNumber" json:"incarnationNumber,omitempty"`
}

func (m *NodeInfo) Reset()                    { *m = NodeInfo{} }
func (m *NodeInfo) String() string            { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()               {}
func (*NodeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AllNodeInfo struct {
	Nodes []*NodeInfo `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *AllNodeInfo) Reset()                    { *m = AllNodeInfo{} }
func (m *AllNodeInfo) String() string            { return proto.CompactTextString(m) }
func (*AllNodeInfo) ProtoMessage()               {}
func (*AllNodeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AllNodeInfo) GetNodes() []*NodeInfo {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type AckPing struct {
	IsJoined bool `protobuf:"varint,1,opt,name=isJoined" json:"isJoined,omitempty"`
}

func (m *AckPing) Reset()                    { *m = AckPing{} }
func (m *AckPing) String() string            { return proto.CompactTextString(m) }
func (*AckPing) ProtoMessage()               {}
func (*AckPing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Result struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*NodeInfo)(nil), "members.NodeInfo")
	proto.RegisterType((*AllNodeInfo)(nil), "members.AllNodeInfo")
	proto.RegisterType((*AckPing)(nil), "members.AckPing")
	proto.RegisterType((*Result)(nil), "members.Result")
	proto.RegisterType((*Empty)(nil), "members.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for MemberService service

type MemberServiceClient interface {
	Join(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*AllNodeInfo, error)
	NotifyNode(ctx context.Context, in *AllNodeInfo, opts ...grpc.CallOption) (*AllNodeInfo, error)
}

type memberServiceClient struct {
	cc *grpc.ClientConn
}

func NewMemberServiceClient(cc *grpc.ClientConn) MemberServiceClient {
	return &memberServiceClient{cc}
}

func (c *memberServiceClient) Join(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*AllNodeInfo, error) {
	out := new(AllNodeInfo)
	err := grpc.Invoke(ctx, "/members.MemberService/Join", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) NotifyNode(ctx context.Context, in *AllNodeInfo, opts ...grpc.CallOption) (*AllNodeInfo, error) {
	out := new(AllNodeInfo)
	err := grpc.Invoke(ctx, "/members.MemberService/NotifyNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MemberService service

type MemberServiceServer interface {
	Join(context.Context, *NodeInfo) (*AllNodeInfo, error)
	NotifyNode(context.Context, *AllNodeInfo) (*AllNodeInfo, error)
}

func RegisterMemberServiceServer(s *grpc.Server, srv MemberServiceServer) {
	s.RegisterService(&_MemberService_serviceDesc, srv)
}

func _MemberService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.MemberService/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Join(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_NotifyNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllNodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).NotifyNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.MemberService/NotifyNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).NotifyNode(ctx, req.(*AllNodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _MemberService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "members.MemberService",
	HandlerType: (*MemberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _MemberService_Join_Handler,
		},
		{
			MethodName: "NotifyNode",
			Handler:    _MemberService_NotifyNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

// Client API for SwimService service

type SwimServiceClient interface {
	Ping(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*AckPing, error)
	RequirePing(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*Result, error)
	Suspect(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*Empty, error)
	Alive(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*Empty, error)
	Confirm(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*Empty, error)
}

type swimServiceClient struct {
	cc *grpc.ClientConn
}

func NewSwimServiceClient(cc *grpc.ClientConn) SwimServiceClient {
	return &swimServiceClient{cc}
}

func (c *swimServiceClient) Ping(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*AckPing, error) {
	out := new(AckPing)
	err := grpc.Invoke(ctx, "/members.SwimService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swimServiceClient) RequirePing(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/members.SwimService/RequirePing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swimServiceClient) Suspect(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/members.SwimService/Suspect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swimServiceClient) Alive(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/members.SwimService/Alive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swimServiceClient) Confirm(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/members.SwimService/Confirm", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SwimService service

type SwimServiceServer interface {
	Ping(context.Context, *NodeInfo) (*AckPing, error)
	RequirePing(context.Context, *NodeInfo) (*Result, error)
	Suspect(context.Context, *NodeInfo) (*Empty, error)
	Alive(context.Context, *NodeInfo) (*Empty, error)
	Confirm(context.Context, *NodeInfo) (*Empty, error)
}

func RegisterSwimServiceServer(s *grpc.Server, srv SwimServiceServer) {
	s.RegisterService(&_SwimService_serviceDesc, srv)
}

func _SwimService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwimServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.SwimService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwimServiceServer).Ping(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwimService_RequirePing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwimServiceServer).RequirePing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.SwimService/RequirePing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwimServiceServer).RequirePing(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwimService_Suspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwimServiceServer).Suspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.SwimService/Suspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwimServiceServer).Suspect(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwimService_Alive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwimServiceServer).Alive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.SwimService/Alive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwimServiceServer).Alive(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwimService_Confirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwimServiceServer).Confirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/members.SwimService/Confirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwimServiceServer).Confirm(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _SwimService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "members.SwimService",
	HandlerType: (*SwimServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _SwimService_Ping_Handler,
		},
		{
			MethodName: "RequirePing",
			Handler:    _SwimService_RequirePing_Handler,
		},
		{
			MethodName: "Suspect",
			Handler:    _SwimService_Suspect_Handler,
		},
		{
			MethodName: "Alive",
			Handler:    _SwimService_Alive_Handler,
		},
		{
			MethodName: "Confirm",
			Handler:    _SwimService_Confirm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("messages.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x52, 0x4f, 0x4b, 0xc3, 0x30,
	0x14, 0x6f, 0x75, 0x5d, 0xeb, 0x2b, 0x4e, 0x17, 0x3c, 0x8c, 0x9d, 0x46, 0x40, 0xdc, 0x61, 0x16,
	0xdc, 0xc0, 0x83, 0xb7, 0x21, 0x1e, 0x14, 0x1c, 0x92, 0x7d, 0x82, 0xae, 0x7d, 0x1b, 0xc1, 0x26,
	0x99, 0x49, 0x3a, 0xd9, 0xc5, 0xaf, 0xae, 0xb4, 0xb3, 0x55, 0x58, 0x07, 0x3b, 0xbe, 0xdf, 0xfb,
	0xfd, 0xcb, 0x23, 0xd0, 0x11, 0x68, 0x4c, 0xbc, 0x42, 0x13, 0xad, 0xb5, 0xb2, 0x8a, 0xf8, 0x02,
	0xc5, 0x02, 0xb5, 0xa1, 0x0c, 0x82, 0x99, 0x4a, 0xf1, 0x59, 0x2e, 0x15, 0xe9, 0x81, 0x1f, 0xa7,
	0xa9, 0x46, 0x63, 0x7a, 0xee, 0xc0, 0x1d, 0x9e, 0xb1, 0x6a, 0x24, 0x23, 0xe8, 0x72, 0x99, 0xc4,
	0x5a, 0xc6, 0x96, 0x2b, 0x39, 0xcb, 0x0b, 0x6d, 0xef, 0x64, 0xe0, 0x0e, 0x3d, 0xb6, 0xbf, 0xa0,
	0xf7, 0x10, 0x4e, 0xb3, 0xac, 0xb6, 0xbd, 0x01, 0x4f, 0xaa, 0x14, 0x0b, 0xd3, 0xd3, 0x61, 0x38,
	0xee, 0x46, 0xbf, 0xd9, 0x51, 0xc5, 0x60, 0xbb, 0x3d, 0xbd, 0x06, 0x7f, 0x9a, 0xbc, 0xbf, 0x71,
	0xb9, 0x22, 0x7d, 0x08, 0xb8, 0x79, 0x51, 0x5c, 0x62, 0x5a, 0x76, 0x09, 0x58, 0x3d, 0x53, 0x0a,
	0x6d, 0x86, 0x26, 0xcf, 0x6c, 0x51, 0xd8, 0xe4, 0x49, 0x52, 0x15, 0x0e, 0x58, 0x35, 0x52, 0x1f,
	0xbc, 0x27, 0xb1, 0xb6, 0xdb, 0xf1, 0x17, 0x9c, 0xbf, 0x96, 0x71, 0x73, 0xd4, 0x1b, 0x9e, 0x20,
	0xb9, 0x83, 0x56, 0xe1, 0x43, 0xf6, 0x6b, 0xf4, 0xaf, 0x6a, 0xe8, 0x5f, 0x7d, 0xea, 0x90, 0x07,
	0x80, 0x99, 0xb2, 0x7c, 0xb9, 0x2d, 0x30, 0xd2, 0xc8, 0x3a, 0xa4, 0x1d, 0x7f, 0xbb, 0x10, 0xce,
	0x3f, 0xb9, 0xa8, 0xe2, 0x6f, 0xa1, 0x55, 0x3e, 0xb0, 0x21, 0xfe, 0xf2, 0xcf, 0x62, 0x77, 0x05,
	0xea, 0x90, 0x09, 0x84, 0x0c, 0x3f, 0x72, 0xae, 0xf1, 0x90, 0xea, 0xa2, 0x86, 0x76, 0x47, 0xa1,
	0x0e, 0x89, 0xc0, 0x9f, 0xe7, 0x66, 0x8d, 0x89, 0x6d, 0x12, 0x74, 0x6a, 0xa8, 0xbc, 0x10, 0x75,
	0xc8, 0x08, 0xbc, 0x69, 0xc6, 0x37, 0x78, 0x1c, 0x3b, 0x02, 0xff, 0x51, 0xc9, 0x25, 0xd7, 0xe2,
	0x28, 0xfe, 0xa2, 0x5d, 0xfe, 0xb8, 0xc9, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xba, 0x3e, 0x0e,
	0xd1, 0x83, 0x02, 0x00, 0x00,
}
